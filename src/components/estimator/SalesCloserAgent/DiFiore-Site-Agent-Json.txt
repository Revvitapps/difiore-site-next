/* ============================================================================
   EstimatorFlow.forSalesCloser.ts
   Purpose: A UI-agnostic, readable TypeScript spec of your 4-step estimator.
   Origin files (for reference):
     - app route:            src/app/project-calculator/page.tsx
     - wrapper:              src/components/EstimatorForm.tsx
     - step 1:               src/components/estimator/ProjectSelector.tsx
     - step 2:               src/components/estimator/StepDetails.tsx
     - step 3:               src/components/estimator/ContactForm.tsx
     - step 4:               src/components/estimator/ReviewSummary.tsx
     - shared types:         src/components/estimator/types.ts
     - email submit helper:  src/components/estimator/utils/emailSubmit.ts
   ============================================================================ */

/* ---------------------------------- Types ---------------------------------- */

export type ProjectKey =
  | "roofing"
  | "siding"
  | "deck"
  | "windows"
  | "kitchen"
  | "bathroom"
  | "addition";

export interface EstimatorDetails {
  // Common
  squareFootage?: string;        // e.g. roof/living sqft, deck sqft, new finished sqft
  scopeDescription?: string;     // human summary like "gut kitchen, move wall, island"

  // Roofing
  tearOff?: "tearOff" | "overlay";
  roofType?: "archAsp" | "cedarShake" | "slate" | "rubber";
  roofComplexity?: "simple" | "complex" | "veryComplex";

  // Kitchen
  cabinetsScope?: "refresh" | "replaceSameLayout" | "fullGutMoveWalls";
  applianceLevel?: "reuse" | "mid" | "highEnd";

  // Bathroom
  bathType?: "powder" | "guestFull" | "primarySpa";
  layoutChanges?: "sameLayout" | "minor" | "movePlumbing";
  finishLevel?: "basic" | "popular" | "designer";
  showerType?: "standard" | "tilePan" | "wetRoom";
  vanityLengthFt?: string;

  // Siding
  sidingMaterial?: "vinyl" | "fiberCement" | "cedar";

  // Windows
  windowCount?: string;
}

export interface EstimateSnapshot {
  conservative: number;
  likely: number;
  premium: number;
  /** Optional human-friendly bullet lines to explain inclusions/exclusions */
  breakdownLines?: string[];
}

/** Contact fields collected in Step 3 */
export interface ContactInfo {
  fullName: string;
  email: string;
  phone?: string;
  addressCity?: string;
  addressZip?: string;
  notes?: string;
}

/** Full state of the wizard for storage/hand-off */
export interface EstimatorStateLike {
  step: 1 | 2 | 3 | 4;
  project: ProjectKey | null;
  details: EstimatorDetails;
  estimate: EstimateSnapshot | null;
  contact: ContactInfo | null;
}

/* ---------------------------- Step Definitions ----------------------------- */
/** Sales Closer can render dynamic fields based on this config. */
export type FieldKind = "text" | "number" | "select";
export interface FieldConfig {
  key: keyof EstimatorDetails;
  label: string;
  type: FieldKind;
  placeholder?: string;
  options?: { value: string; label: string }[];
  required?: boolean;
}

export const PROJECT_FIELDS: Partial<Record<ProjectKey, FieldConfig[]>> = {
  roofing: [
    { key: "squareFootage", label: "Roof or Living Sq Ft", type: "number", placeholder: "e.g. 2200", required: true },
    { key: "tearOff", label: "Existing Roof Removal", type: "select", options: [
      { value: "tearOff", label: "Full tear-off" }, { value: "overlay", label: "Install over current layer" }
    ], required: true },
    { key: "roofType", label: "Roof Material", type: "select", options: [
      { value: "archAsp", label: "Architectural Asphalt" },
      { value: "cedarShake", label: "Cedar Shake" },
      { value: "slate", label: "Natural Slate" },
      { value: "rubber", label: "EPDM / Rubber" }
    ], required: true },
    { key: "roofComplexity", label: "Roof Complexity", type: "select", options: [
      { value: "simple", label: "Simple (few planes)" },
      { value: "complex", label: "Complex (dormers / hips)" },
      { value: "veryComplex", label: "Very complex (cut-up / steep)" }
    ], required: true },
    { key: "scopeDescription", label: "Quick Scope Summary", type: "text", placeholder: "Shingle color, leaks, layers..." }
  ],
  kitchen: [
    { key: "squareFootage", label: "Approx. Kitchen Sq Ft", type: "number", placeholder: "e.g. 180", required: true },
    { key: "cabinetsScope", label: "Cabinet Scope", type: "select", options: [
      { value: "refresh", label: "Refresh / paint existing" },
      { value: "replaceSameLayout", label: "Replace in same layout" },
      { value: "fullGutMoveWalls", label: "Full gut / move walls" }
    ], required: true },
    { key: "applianceLevel", label: "Appliance Package", type: "select", options: [
      { value: "reuse", label: "Reuse existing" },
      { value: "mid", label: "Mid-grade upgrade" },
      { value: "highEnd", label: "High-end / pro series" }
    ], required: true },
    { key: "scopeDescription", label: "Quick Scope Summary", type: "text", placeholder: "Gut to studs, new layout, island..." }
  ],
  bathroom: [
    { key: "squareFootage", label: "Approx. Bathroom Sq Ft", type: "number", placeholder: "e.g. 60", required: true },
    { key: "bathType", label: "Bathroom Type", type: "select", options: [
      { value: "powder", label: "Powder / half bath" },
      { value: "guestFull", label: "Guest full bath" },
      { value: "primarySpa", label: "Primary / spa bath" }
    ], required: true },
    { key: "layoutChanges", label: "Layout Changes", type: "select", options: [
      { value: "sameLayout", label: "Keep existing layout" },
      { value: "minor", label: "Minor tweaks" },
      { value: "movePlumbing", label: "Move plumbing walls" }
    ], required: true },
    { key: "finishLevel", label: "Finish Level", type: "select", options: [
      { value: "basic", label: "Builder basic" },
      { value: "popular", label: "Most popular" },
      { value: "designer", label: "Designer / high-end" }
    ], required: true },
    { key: "showerType", label: "Shower Type", type: "select", options: [
      { value: "standard", label: "Prefab / fiberglass" },
      { value: "tilePan", label: "Tile surround w/ pan" },
      { value: "wetRoom", label: "Curbless / wet room" }
    ]},
    { key: "vanityLengthFt", label: "Vanity Length (ft)", type: "number", placeholder: "e.g. 6" },
    { key: "scopeDescription", label: "Quick Scope Summary", type: "text", placeholder: "Tile shower, double vanity, move toilet..." }
  ],
  siding: [
    { key: "squareFootage", label: "Approx. Living Sq Ft", type: "number", placeholder: "e.g. 2400", required: true },
    { key: "sidingMaterial", label: "Siding Material", type: "select", options: [
      { value: "vinyl", label: "Vinyl" },
      { value: "fiberCement", label: "Fiber cement" },
      { value: "cedar", label: "Cedar" }
    ], required: true },
    { key: "scopeDescription", label: "Quick Scope Summary", type: "text", placeholder: "Whole home wrap, trim, gutters..." }
  ],
  windows: [
    { key: "windowCount", label: "Number of Windows", type: "number", placeholder: "e.g. 18", required: true },
    { key: "scopeDescription", label: "Quick Scope Summary", type: "text", placeholder: "Full replacement incl. trim/paint?" }
  ],
  deck: [
    { key: "squareFootage", label: "Deck Sq Ft", type: "number", placeholder: "e.g. 320", required: true },
    { key: "scopeDescription", label: "Desired Dimensions", type: "text", placeholder: "e.g. 12' x 20', stairs, railing..." }
  ],
  addition: [
    { key: "squareFootage", label: "New Finished Sq Ft", type: "number", placeholder: "e.g. 450", required: true },
    { key: "scopeDescription", label: "Quick Scope Summary", type: "text", placeholder: "Primary suite over garage / basement finish..." }
  ]
};

/* ---------------------------- Pricing Entrypoint --------------------------- */
/** Replace with your production getEstimate logic; this is a readable proxy. */
export function getEstimate(project: ProjectKey, d: EstimatorDetails): EstimateSnapshot {
  const sqft = Number(d.squareFootage ?? 0) || 0;
  const windows = Number(d.windowCount ?? 0) || 0;

  // Baselines (illustrative; align to your existing logic):
  let base = 0;
  switch (project) {
    case "roofing":
      base = sqft * 6.5; // asphalt baseline
      if (d.roofType === "cedarShake") base *= 2.1;
      if (d.roofType === "slate") base *= 3.5;
      if (d.roofType === "rubber") base *= 1.4;
      if (d.roofComplexity === "complex") base *= 1.18;
      if (d.roofComplexity === "veryComplex") base *= 1.35;
      if (d.tearOff === "tearOff") base *= 1.12;
      break;

    case "siding":
      base = sqft * 7.0;
      if (d.sidingMaterial === "fiberCement") base *= 1.45;
      if (d.sidingMaterial === "cedar") base *= 1.6;
      break;

    case "windows":
      base = windows * 850; // per unit baseline
      break;

    case "deck":
      base = sqft * 55; // composite baseline
      break;

    case "addition":
      base = sqft * 230; // full addition baseline
      break;

    case "kitchen": {
      base = (sqft || 160) * 350; // gut baseline per sqft
      if (d.cabinetsScope === "refresh") base *= 0.6;
      if (d.cabinetsScope === "replaceSameLayout") base *= 0.9;
      if (d.cabinetsScope === "fullGutMoveWalls") base *= 1.2;
      if (d.applianceLevel === "mid") base *= 1.05;
      if (d.applianceLevel === "highEnd") base *= 1.15;
      break;
    }

    case "bathroom": {
      // baseline by bath type:
      base =
        d.bathType === "powder" ? 9500 :
        d.bathType === "guestFull" ? 18500 :
        d.bathType === "primarySpa" ? 32500 : 15000;
      if (d.layoutChanges === "minor") base *= 1.08;
      if (d.layoutChanges === "movePlumbing") base *= 1.22;
      if (d.finishLevel === "popular") base *= 1.08;
      if (d.finishLevel === "designer") base *= 1.18;
      if (d.showerType === "wetRoom") base *= 1.15;
      break;
    }
  }

  // Tier spread (tune to your model):
  const likely = Math.round(base);
  const conservative = Math.round(base * 0.88);
  const premium = Math.round(base * 1.18);

  const breakdownLines = suggestBreakdown(project, d);
  return { conservative, likely, premium, breakdownLines };
}

function suggestBreakdown(project: ProjectKey, d: EstimatorDetails): string[] {
  switch (project) {
    case "roofing":
      return [
        "Includes tear-off (if selected), underlayment, flashing, and install.",
        "Excludes rotten sheathing replacement (site-verified).",
      ];
    case "siding":
      return [
        "Includes house wrap, trim, and siding install.",
        "Color/texture selection may affect final cost.",
      ];
    case "windows":
      return [
        "Includes removal, install, and basic interior/exterior trim.",
        "Specialty shapes or egress windows priced separately.",
      ];
    case "deck":
      return [
        "Includes framing, composite surface, and railing.",
        "Stairs, lighting, and roof structures priced separately.",
      ];
    case "addition":
      return [
        "Design, permits, framing, MEPs, insulation, drywall, finishes.",
        "Foundation and structural variations verified on site.",
      ];
    case "kitchen":
      return [
        "Cabinets, counters, flooring, lighting, appliance package per selection.",
        "Layout changes and structural work increase complexity.",
      ];
    case "bathroom":
      return [
        "Tile/mud work, vanity, plumbing/electrical fixtures, glass (if applicable).",
        "Wet-room or custom stone elevates final price.",
      ];
  }
}

/* --------------------------------- Steps ----------------------------------- */
/**
 * Step 1: Project selection (one of ProjectKey)
 * Step 2: Project-specific details (from PROJECT_FIELDS[project])
 * Step 3: Contact info (fullName, email, phone, city/zip, notes)
 * Step 4: Review & Submit (emit Lead payload)
 */

/* ------------------------------- Validation -------------------------------- */

export function validateDetails(project: ProjectKey, d: EstimatorDetails): string[] {
  const fields = PROJECT_FIELDS[project] ?? [];
  const errors: string[] = [];
  for (const f of fields) {
    if (f.required) {
      const val = (d[f.key] ?? "").toString().trim();
      if (!val) errors.push(`Missing: ${f.label}`);
    }
  }
  return errors;
}

export function validateContact(c: ContactInfo): string[] {
  const errors: string[] = [];
  if (!c.fullName?.trim()) errors.push("Missing: Full Name");
  if (!c.email?.trim()) errors.push("Missing: Email");
  // Optional: rudimentary checks
  if (c.email && !/.+@.+\..+/.test(c.email)) errors.push("Email looks invalid");
  if (c.phone && c.phone.replace(/\D/g, "").length < 10) errors.push("Phone looks too short");
  return errors;
}

/* ------------------------------ Lead Payload ------------------------------- */
/** Create a clean object to send to Sales Closer or your backend. */
export type LeadPayload = {
  source: "EstimatorWidget";
  project: ProjectKey;
  details: EstimatorDetails;
  estimate: EstimateSnapshot;
  contact: ContactInfo;
  meta: {
    page: string;            // e.g. "/project-calculator"
    utm?: Record<string, string>;
    timestampISO: string;
  };
};

export function toLeadPayload(
  project: ProjectKey,
  details: EstimatorDetails,
  estimate: EstimateSnapshot,
  contact: ContactInfo,
  meta: { page: string; utm?: Record<string, string> }
): LeadPayload {
  return {
    source: "EstimatorWidget",
    project,
    details,
    estimate,
    contact,
    meta: {
      page: meta.page,
      utm: meta.utm,
      timestampISO: new Date().toISOString(),
    },
  };
}

/* -------------------------- Minimal Flow Controller ------------------------ */
/** Sales Closer can emulate this state machine without React. */
export const EstimatorFlow = {
  start(): EstimatorStateLike {
    return { step: 1, project: null, details: {}, estimate: null, contact: null };
  },

  selectProject(state: EstimatorStateLike, project: ProjectKey): EstimatorStateLike {
    return { ...state, project, step: 2, details: {}, estimate: null };
  },

  updateDetails(state: EstimatorStateLike, patch: Partial<EstimatorDetails>): EstimatorStateLike {
    return { ...state, details: { ...state.details, ...patch } };
  },

  computeEstimate(state: EstimatorStateLike): EstimatorStateLike {
    if (!state.project) return state;
    const estimate = getEstimate(state.project, state.details);
    return { ...state, estimate };
  },

  toContactStep(state: EstimatorStateLike): EstimatorStateLike {
    return { ...state, step: 3 };
  },

  setContact(state: EstimatorStateLike, contact: ContactInfo): EstimatorStateLike {
    return { ...state, contact };
  },

  review(state: EstimatorStateLike): EstimatorStateLike {
    return { ...state, step: 4 };
  },
};

/* ----------------------------- Example Usage ------------------------------- */

function exampleFlowDemo() {
  let s = EstimatorFlow.start();
  s = EstimatorFlow.selectProject(s, "roofing");
  s = EstimatorFlow.updateDetails(s, {
    squareFootage: "2200",
    tearOff: "tearOff",
    roofType: "archAsp",
    roofComplexity: "complex",
    scopeDescription: "Full tear-off, architectural shingles, fix flashing"
  });
  s = EstimatorFlow.computeEstimate(s);
  s = EstimatorFlow.toContactStep(s);
  s = EstimatorFlow.setContact(s, {
    fullName: "Jane Homeowner",
    email: "jane@example.com",
    phone: "(610) 555-1212",
    addressCity: "Chadds Ford",
    addressZip: "19317",
  });
  s = EstimatorFlow.review(s);

  const payload = toLeadPayload(
    s.project!, s.details, s.estimate!, s.contact!,
    { page: "/project-calculator", utm: { source: "website", campaign: "estimator" } }
  );

  // POST payload to Sales Closer AI / your API here:
  // fetch("https://YOUR_ENDPOINT/lead", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(payload) })
  return payload;
}

// Uncomment to test locally:
// console.log(JSON.stringify(exampleFlowDemo(), null, 2));